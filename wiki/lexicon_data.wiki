#summary Lexicon data and file types.
#labels Featured


=Lexicon data and file types=

Lexicon data is plain text.

From version 0.1.9 pyLatinam introduces parsed dictionary entries from William Whitaker's [http://users.erols.com/whitaker/words.htm WORDS]. The types of words are introduced when the type becomes available in pyLatinam code, since meanings are not main interest; they are more like a "supplement" for visitors of Web Version.

More important, WORDS is used for getting the data needed for the derivation. Now, there are two sources of information for processing:

  * Internal lexicon (manually selected entries used for testing; it is in /lexicon/lat)
  * WORDS (full-scale searchable index of Latin words; it is in /lexicon/words)


==Types of files==

===Internal===

Definition files are located in latinam/lexicon folder. Each definition file has prefix `latin_` followed by POS ID (part of speech identifier). For example: `latin_n.txt` for nouns or `latin_v.txt` for verbs. POS determines format of entered words.

For nouns: `tempus,oris,n`

For verbs: `condo,condere,3,condidi`

For prepositions: `iuxta,3`

Translation files are stored into separate directories with prefix `latin_` plus language id (`latin_en`, `latin_sr`), also located inside lexicon folder. Pattern for naming files is the same as for definition files and difference is in content: each file contains one comma delimited word which serves as id, followed by translation. For now, franslation files are not so importand for this project.

Example:

Comma delimited adjective is linked and searched in latin_adj.txt and vice versa: `omnius,all`

First word is id, everything else is translation: `finitimus,adjacent,adjoin`

===Parsed WORDS===

In order to speed up the search, all words that start with the same letter are in the same file. 

Data for derivation:

`/lexicon/n/latin_n_LETTER.txt`
`/lexicon/v/latin_v_LETTER.txt`

Translation entries: 

`/lexicon/n_translate/latin_n_LETTER.txt`
`/lexicon/v_translate/latin_v_LETTER.txt`

Where LETTER is the first letter of the searched word.

==Searching and processing==

Search for the noun "mare" in internal lexicon: 

`Nom("mare", mode="simple")`

Search for the noun "lex" in WORDS:

`Nom("lex", mode="words")`

Do *not* search for the word, but process is as it it entered:

`Nom("mare,is,n", nolex="True")`

Same applies for Ver() class.